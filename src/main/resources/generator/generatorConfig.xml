<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <classPathEntry
            location="E:\work\genlombokcode\src\main\resources\mysql-connector-java-8.0.18.jar" />

    <!-- defaultModelType 该属性支持三种生成方式：
            1.conditional，默认是这种方式，当一张表只有一个主键时，不会为主键生成单独的实体类，超过一个则会生成单独的主键实体类，BLOB字段仍单独生成实体类。
            2.hierarchical，只要表里有主键，就会生成单独的主键实体类，其余同上
            3.flat，只为一张表生成一个实体类，包含所有字段-->
    <!-- targetRuntime
            1.MyBatis3Simple，代表不生成Example文件。
            2.MyBatis3，MyBatis3代表生成Example文件-->
    <context id="context1" targetRuntime="MyBatis3" defaultModelType="flat">

        <!-- 自动生成lombok注解配置和根据数据库注释为实体添加注释, 需要自己编译文件才可以实现,具体见https://www.jianshu.com/p/58ee7e09fc3f -->
        <plugin type="org.mybatis.generator.plugins.LombokPlugin" >
            <property name="hasLombok" value="true"/>
        </plugin>

        <!--optional,指在创建class时，对注释进行控制-->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接-->
        <jdbcConnection
                connectionURL="jdbc:mysql://192.168.1.115:55580/water_db"
                driverClass="com.mysql.cj.jdbc.Driver" password="123456" userId="root">
        </jdbcConnection>

        <!--非必须，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 -->
            <!-- 不是 double 和 long 类型 -->
            <!-- 使用常用的基本类型代替 sql 包下的引用类型 -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- targetPackage：生成的实体类所在的包 -->
        <!-- targetProject：生成的实体类所在的硬盘位置 -->
        <javaModelGenerator
                targetPackage="com.rhzt.water.model"
                targetProject="src/main/java">
            <!-- 是否允许子包 -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对modal添加构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 -->
        <javaClientGenerator
                targetPackage="com.rhzt.water.dao"
                targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true" />
        </javaClientGenerator>

        <!-- tableName是数据库中的表名，domainObjectName是生成的JAVA模型名，后面的参数不用改，要生成更多的表就在下面继续加table标签 -->
        <!-- 权限相关表 -->
        <table tableName="biz_acpt" domainObjectName="BizAcceptance" />
<!--        <table tableName="biz_project_pre_funds" domainObjectName="BizProjectPreFunds" />-->
<!--        <table tableName="biz_project_pre_work_progress" domainObjectName="BizProjectPreWorkProgress" />-->
<!--        <table tableName="biz_project_resp_org" domainObjectName="BizProjectRespOrg" />-->
    </context>
</generatorConfiguration>
